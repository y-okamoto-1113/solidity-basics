// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

/** 
 * @title Arrays typeを学ぼう
 * Reference Typesに属する
 * Array（配列）には，コンパイル時に固定されたサイズを持つものと，動的なサイズを持つものがある
 * 固定サイズkで要素型Tの配列の型はT[k]と書き，動的サイズの配列はT[]と書く
 * 配列の要素は、Mapping型やStruct型を含め、どのような型でも良い
 * 状態変数配列にpublicのvisibilityを付与してGetterファンクションを作成できる。
 *   この場合、配列要素のインデックスが必須
 */
contract Arrays {
    /// @dev int/uint array
    // 配列定義
    // 固定長

    // 配列要素は定義した型の要素が必要。以下は定義不可(-1はuintの範囲外)
    // uint[2] public arrayNG = [1, -1];
    // 1はuintXだと見なされるのでintに変換する必要がある

    /// 可変長

    // 二次元配列

    // 配列要素の取り出し方


    // 配列要素の変更


    // 配列全体の取得

    
    // メンバーメソッド

        // array1は固定長なので定義した要素数を超えてpushできない
        // array1.push(num);
        // array2は可変長なのでpushできる

        // array2の最後の要素を取り出す



    /**
     * @dev 動的な長さを持つメモリ配列は、new演算子で作成することができる
     * ストレージ配列とは異なり、メモリ配列のサイズを変更できない(例.push,.popは使用できない)
     * 必要なサイズをあらかじめ計算しておくか、新しいメモリ配列を作成して各要素をコピーする必要がある
     */

    
    /// @dev 配列スライス 引数例([1,2,3,4,5], 2)


}

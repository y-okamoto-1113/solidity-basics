// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

/** 
 * @title Integers Typeを学ぼう
 */
contract Integers {
   /** 
    * @dev intX:符号付き整数, uintX:符号なし整数
    * int8〜int256/uint8〜uint256まで8単位
    * uintとintは、それぞれuint256とint256のエイリアス
    */


    /** @dev 8bit 上限値下限値確認
     *   int8 : -128 〜 127 / 10000000 - 01111111
     *  uint8 : 0    〜 255 / 00000000 - 11111111
     * https://note.cman.jp/convert/bit/
     */


    /// @dev 比較演算子
    // 以下

    // 未満

    // イコール

    // イコールではない

    // 以上

    // より大きい


    /// @dev 型違いは比較できないので注意。比較したいときは型を合わせる


   /// @dev ビット演算子
   // AND : 両方のビットが共に1の場合だけ1

   // OR : 両方のビットのどちらかが1の場合に1

   // XOR : ビットの値が異なる場合にだけ1

   // NOT : ビット反転




   /// @dev シフト演算
   // 左シフト
   // 1000 -> 10000    

   // 右シフト
   /// 1000 -> 100    


   /// @dev 算術演算子

   // 足し算

   // 引き算

   // 掛け算

   // 割り算

   // 剰余 : aをbで割った余り

   // べき乗


   /// @dev 数値リテラル

   // 計算過程では小数が使える

   /// @dev 小数は扱えない(結果が整数なら扱える)


   /// @dev 三項演算子

}